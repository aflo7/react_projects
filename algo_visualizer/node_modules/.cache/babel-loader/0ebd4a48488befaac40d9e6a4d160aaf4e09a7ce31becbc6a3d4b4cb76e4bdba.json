{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/fall22/web_app/react_projects-main/algo_visualizer/src/components/Algos.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Algos(_ref) {\n  let {\n    sendArr,\n    arr\n  } = _ref;\n  let currArrState = [];\n  const insertionSort = inputArr => {\n    let newArr = Array.from(inputArr); // this is done, so we don't manipulate PROP arr\n\n    let n = newArr.length;\n    for (let i = 1; i < n; i++) {\n      let current = newArr[i];\n      let j = i - 1;\n      while (j > -1 && current < newArr[j]) {\n        newArr[j + 1] = newArr[j];\n        let t = newArr[j + 1];\n        newArr[j + 1] = \" \";\n        currArrState.push(newArr.slice(0));\n        newArr[j + 1] = t;\n        currArrState.push(newArr.slice(0));\n        j--;\n      }\n      newArr[j + 1] = current;\n      currArrState.push(newArr.slice(0));\n    }\n    sendArr(currArrState);\n    currArrState = [];\n  };\n  const bubbleSort = inputArr => {\n    let newArr = Array.from(inputArr); // this is done, so we don't manipulate PROP arr\n\n    let len = newArr.length;\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len; j++) {\n        if (newArr[j] > newArr[j + 1]) {\n          let tmp = newArr[j];\n          newArr[j] = newArr[j + 1];\n          newArr[j + 1] = tmp;\n          currArrState.push(newArr.slice(0));\n        }\n      }\n    }\n    sendArr(currArrState);\n    currArrState = [];\n  };\n  function merge(left, right) {\n    let arr = [];\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        arr.push(left.shift());\n      } else {\n        arr.push(right.shift());\n      }\n    }\n    currArrState.push([...arr, ...left, ...right]);\n    return [...arr, ...left, ...right];\n  }\n  function mergeSort(inputArr) {\n    const half = inputArr.length / 2;\n\n    // Base case\n    if (inputArr.length < 2) {\n      return inputArr;\n    }\n    const left = inputArr.splice(0, half);\n    return merge(mergeSort(left), mergeSort(inputArr));\n  }\n  const mergeSortWrapper = inputArr => {\n    let newArr = Array.from(inputArr);\n    mergeSort(newArr);\n    sendArr(currArrState);\n    currArrState = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Algorithms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => bubbleSort(arr),\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertionSort(arr),\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => mergeSortWrapper(arr),\n      children: \"Merge Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_c = Algos;\nexport default Algos;\nvar _c;\n$RefreshReg$(_c, \"Algos\");","map":{"version":3,"names":["React","Algos","sendArr","arr","currArrState","insertionSort","inputArr","newArr","Array","from","n","length","i","current","j","t","push","slice","bubbleSort","len","tmp","merge","left","right","shift","mergeSort","half","splice","mergeSortWrapper"],"sources":["/Users/andres/Desktop/fall22/web_app/react_projects-main/algo_visualizer/src/components/Algos.js"],"sourcesContent":["import React from \"react\"\n\nfunction Algos({ sendArr, arr }) {\n  let currArrState = []\n\n  const insertionSort = (inputArr) => {\n    let newArr = Array.from(inputArr) // this is done, so we don't manipulate PROP arr\n\n    let n = newArr.length\n    for (let i = 1; i < n; i++) {\n      let current = newArr[i]\n      let j = i - 1\n      while (j > -1 && current < newArr[j]) {\n        newArr[j + 1] = newArr[j]\n\n        let t = newArr[j + 1]\n        newArr[j + 1] = \" \"\n        currArrState.push(newArr.slice(0))\n        newArr[j + 1] = t\n        currArrState.push(newArr.slice(0))\n\n        j--\n      }\n\n      newArr[j + 1] = current\n      currArrState.push(newArr.slice(0))\n    }\n    sendArr(currArrState)\n    currArrState = []\n  }\n\n  const bubbleSort = (inputArr) => {\n    let newArr = Array.from(inputArr) // this is done, so we don't manipulate PROP arr\n\n    let len = newArr.length\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len; j++) {\n        if (newArr[j] > newArr[j + 1]) {\n          let tmp = newArr[j]\n          newArr[j] = newArr[j + 1]\n          newArr[j + 1] = tmp\n          currArrState.push(newArr.slice(0))\n        }\n      }\n    }\n\n    sendArr(currArrState)\n    currArrState = []\n  }\n\n  function merge(left, right) {\n    let arr = []\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        arr.push(left.shift())\n      } else {\n        arr.push(right.shift())\n      }\n    }\n\n    currArrState.push([...arr, ...left, ...right])\n    return [...arr, ...left, ...right]\n  }\n\n  function mergeSort(inputArr) {\n \n    const half = inputArr.length / 2\n\n    // Base case\n    if (inputArr.length < 2) {\n      return inputArr\n    }\n\n    const left = inputArr.splice(0, half)\n\n    return merge(mergeSort(left), mergeSort(inputArr))\n  }\n\n  const mergeSortWrapper = (inputArr) => {\n    let newArr = Array.from(inputArr)\n    mergeSort(newArr)\n    sendArr(currArrState)\n    currArrState = []\n  }\n\n  return (\n    <div>\n      <div>Algorithms</div>\n\n      <button onClick={() => bubbleSort(arr)}>Bubble Sort</button>\n      <button onClick={() => insertionSort(arr)}>Insertion Sort</button>\n      <button onClick={() => mergeSortWrapper(arr)}>Merge Sort</button>\n    </div>\n  )\n}\n\nexport default Algos\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}